{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { getAuth, signInWithPopup, GoogleAuthProvider, createUserWithEmailAndPassword, signInWithEmailAndPassword } from \"firebase/auth\";\nimport { getFirestore, doc, getDoc, setDoc } from \"firebase/firestore\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDpwU-nU3r1ik9owmSQzZ9ZWmi81UfHGt4\",\n  authDomain: \"crwn-shop-59e82.firebaseapp.com\",\n  projectId: \"crwn-shop-59e82\",\n  storageBucket: \"crwn-shop-59e82.appspot.com\",\n  messagingSenderId: \"1086017835139\",\n  appId: \"1:1086017835139:web:1ddf895ba8d0ae83158bb6\"\n};\nconst app = initializeApp(firebaseConfig);\nconst googleProvider = new GoogleAuthProvider(); // you can generate different provider (provider is iniitiate as class)\ngoogleProvider.setCustomParameters({\n  prompt: \"select_account\"\n});\n\n// instantiate auth instance\n// users first auth with google with google popup, then from that user data in auth to create user in db\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, googleProvider);\n\n// instantiate db instance\nexport const db = getFirestore();\n\n// userAuth argument is the response from log-in-ed google user using auth instance, access its uid property\nexport const createUserDocumentFromAuth = async (userAuth, additionalInformation = {}) => {\n  // protect the code if we dont get input\n  if (!userAuth) return;\n\n  // create docref (google automatically created a memory space for that uid if it does not exist)\n  const userDocRef = doc(db, \"users\", userAuth.uid);\n  console.log(userDocRef);\n\n  // use getDoc to access the data from the object (userDocRef)\n  // use getDoc to check if the object exists in the db -> return true or false\n  const userSnapshot = await getDoc(userDocRef);\n  console.log(userSnapshot);\n  console.log(userSnapshot.exists());\n\n  // use exists() we can write a logic to setDoc in the db\n  if (!userSnapshot.exists()) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    // try catch block\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n        // add additional information from the createUserDocumentFromAuth function defined\n        ...additionalInformation\n      });\n    } catch (error) {\n      console.log(\"error creating the user\", error.message);\n    }\n  }\n  // if it does exist, it will skip all if block\n  return userDocRef;\n};\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  // protect the code if we dont get input\n  if (!email || !password) {\n    return;\n  }\n  return await createUserWithEmailAndPassword(auth, email, password);\n};","map":{"version":3,"names":["initializeApp","getAuth","signInWithPopup","GoogleAuthProvider","createUserWithEmailAndPassword","signInWithEmailAndPassword","getFirestore","doc","getDoc","setDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","app","googleProvider","setCustomParameters","prompt","auth","signInWithGooglePopup","db","createUserDocumentFromAuth","userAuth","additionalInformation","userDocRef","uid","console","log","userSnapshot","exists","displayName","email","createdAt","Date","error","message","createAuthUserWithEmailAndPassword","password"],"sources":["/Users/viv/Desktop/VS_Code_Projects/crwn-clothing/clothing-shop/src/utils/firebase/firebase.utils.js"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport {\n  getAuth,\n  signInWithPopup,\n  GoogleAuthProvider,\n  createUserWithEmailAndPassword,\n  signInWithEmailAndPassword,\n} from \"firebase/auth\";\nimport { getFirestore, doc, getDoc, setDoc } from \"firebase/firestore\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDpwU-nU3r1ik9owmSQzZ9ZWmi81UfHGt4\",\n  authDomain: \"crwn-shop-59e82.firebaseapp.com\",\n  projectId: \"crwn-shop-59e82\",\n  storageBucket: \"crwn-shop-59e82.appspot.com\",\n  messagingSenderId: \"1086017835139\",\n  appId: \"1:1086017835139:web:1ddf895ba8d0ae83158bb6\",\n};\n\nconst app = initializeApp(firebaseConfig);\nconst googleProvider = new GoogleAuthProvider(); // you can generate different provider (provider is iniitiate as class)\ngoogleProvider.setCustomParameters({\n  prompt: \"select_account\",\n});\n\n// instantiate auth instance\n// users first auth with google with google popup, then from that user data in auth to create user in db\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () =>\n  signInWithPopup(auth, googleProvider);\n\n// instantiate db instance\nexport const db = getFirestore();\n\n// userAuth argument is the response from log-in-ed google user using auth instance, access its uid property\nexport const createUserDocumentFromAuth = async (\n  userAuth,\n  additionalInformation = {}\n) => {\n  // protect the code if we dont get input\n  if (!userAuth) return;\n\n  // create docref (google automatically created a memory space for that uid if it does not exist)\n  const userDocRef = doc(db, \"users\", userAuth.uid);\n  console.log(userDocRef);\n\n  // use getDoc to access the data from the object (userDocRef)\n  // use getDoc to check if the object exists in the db -> return true or false\n  const userSnapshot = await getDoc(userDocRef);\n  console.log(userSnapshot);\n  console.log(userSnapshot.exists());\n\n  // use exists() we can write a logic to setDoc in the db\n  if (!userSnapshot.exists()) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n\n    // try catch block\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n        // add additional information from the createUserDocumentFromAuth function defined\n        ...additionalInformation,\n      });\n    } catch (error) {\n      console.log(\"error creating the user\", error.message);\n    }\n  }\n  // if it does exist, it will skip all if block\n  return userDocRef;\n};\n\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  // protect the code if we dont get input\n  if (!email || !password) {\n    return;\n  }\n\n  return await createUserWithEmailAndPassword(auth, email, password);\n};\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,cAAc;AAC5C,SACEC,OAAO,EACPC,eAAe,EACfC,kBAAkB,EAClBC,8BAA8B,EAC9BC,0BAA0B,QACrB,eAAe;AACtB,SAASC,YAAY,EAAEC,GAAG,EAAEC,MAAM,EAAEC,MAAM,QAAQ,oBAAoB;AAEtE,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,yCAAyC;EACjDC,UAAU,EAAE,iCAAiC;EAC7CC,SAAS,EAAE,iBAAiB;EAC5BC,aAAa,EAAE,6BAA6B;EAC5CC,iBAAiB,EAAE,eAAe;EAClCC,KAAK,EAAE;AACT,CAAC;AAED,MAAMC,GAAG,GAAGjB,aAAa,CAACU,cAAc,CAAC;AACzC,MAAMQ,cAAc,GAAG,IAAIf,kBAAkB,CAAC,CAAC,CAAC,CAAC;AACjDe,cAAc,CAACC,mBAAmB,CAAC;EACjCC,MAAM,EAAE;AACV,CAAC,CAAC;;AAEF;AACA;AACA,OAAO,MAAMC,IAAI,GAAGpB,OAAO,CAAC,CAAC;AAC7B,OAAO,MAAMqB,qBAAqB,GAAGA,CAAA,KACnCpB,eAAe,CAACmB,IAAI,EAAEH,cAAc,CAAC;;AAEvC;AACA,OAAO,MAAMK,EAAE,GAAGjB,YAAY,CAAC,CAAC;;AAEhC;AACA,OAAO,MAAMkB,0BAA0B,GAAG,MAAAA,CACxCC,QAAQ,EACRC,qBAAqB,GAAG,CAAC,CAAC,KACvB;EACH;EACA,IAAI,CAACD,QAAQ,EAAE;;EAEf;EACA,MAAME,UAAU,GAAGpB,GAAG,CAACgB,EAAE,EAAE,OAAO,EAAEE,QAAQ,CAACG,GAAG,CAAC;EACjDC,OAAO,CAACC,GAAG,CAACH,UAAU,CAAC;;EAEvB;EACA;EACA,MAAMI,YAAY,GAAG,MAAMvB,MAAM,CAACmB,UAAU,CAAC;EAC7CE,OAAO,CAACC,GAAG,CAACC,YAAY,CAAC;EACzBF,OAAO,CAACC,GAAG,CAACC,YAAY,CAACC,MAAM,CAAC,CAAC,CAAC;;EAElC;EACA,IAAI,CAACD,YAAY,CAACC,MAAM,CAAC,CAAC,EAAE;IAC1B,MAAM;MAAEC,WAAW;MAAEC;IAAM,CAAC,GAAGT,QAAQ;IACvC,MAAMU,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC;;IAE5B;IACA,IAAI;MACF,MAAM3B,MAAM,CAACkB,UAAU,EAAE;QACvBM,WAAW;QACXC,KAAK;QACLC,SAAS;QACT;QACA,GAAGT;MACL,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOW,KAAK,EAAE;MACdR,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEO,KAAK,CAACC,OAAO,CAAC;IACvD;EACF;EACA;EACA,OAAOX,UAAU;AACnB,CAAC;AAED,OAAO,MAAMY,kCAAkC,GAAG,MAAAA,CAAOL,KAAK,EAAEM,QAAQ,KAAK;EAC3E;EACA,IAAI,CAACN,KAAK,IAAI,CAACM,QAAQ,EAAE;IACvB;EACF;EAEA,OAAO,MAAMpC,8BAA8B,CAACiB,IAAI,EAAEa,KAAK,EAAEM,QAAQ,CAAC;AACpE,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}